# =========================================================================
#
#  Copyright Ziv Yaniv
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0.txt
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# =========================================================================

import pandas as pd
import argparse
import sys
from .argparse_types import file_path

"""
This script computes statistics from the reagent_resources.csv file and injects them into the input markdown file.
The statistics include:
  * number_of_contributors
  * number_of_recommended_antibodies
  * number_of_not_recommended_antibodies
  * number_of_fluorophores
  * number_of_tissues

The input markdown file includes variables with the names above which are replaced with the computed values (e.g.
{number_of_contributors}). Additionally it includes the variable {do_not_edit_message} which warns against directly
editing the resulting markdown file, edit the input markdown file instead.

This script is automatically run when modifications to the reagent_resources.csv or the index.md.in file are merged
into the main branch of the ibex_knowledge_base repository (see .github/workflows/data2md.yml).

Assumption: The reagent_resources.csv file is valid. It conforms to the expected format (empty entries denoted
by the string "NA").
"""


def update_index_stats(input_md, input_csv, output_file):
    with open(input_md, "r") as fp:
        input_md_str = fp.read()
    stats_dictionary = compute_stats_dictionary(input_csv)
    stats_dictionary[
        "do_not_edit_message"
    ] = "<!-- Do NOT edit this file. It is automatically generated from the reagent_resources.csv file -->\n\n"
    with open(output_file, "w") as fp:
        fp.write(input_md_str.format(**stats_dictionary))


def compute_stats_dictionary(input_csv):
    stats_dict = {}
    df = pd.read_csv(input_csv, dtype=str, keep_default_na=False)
    stats_dict["number_of_contributors"] = df["Contributor"].nunique()
    stats_dict["number_of_recommended_antibodies"] = df["Catalog Number"][
        df["Recommend"] == "Yes"
    ].nunique()
    stats_dict["number_of_not_recommended_antibodies"] = df["Catalog Number"][
        df["Recommend"] == "No"
    ].nunique()
    stats_dict["number_of_fluorophores"] = len(
        df["Conjugate"][
            ~df["Conjugate"].isin(
                [
                    "NA",
                    "AF594",
                    "eF615",
                    "Hoechst",
                    "JOJO-1",
                    "Unconjugated",
                    "PE/Dazzle AF594",
                    "Biotin",
                    "HRP",
                ]
            )
        ].unique()
    )
    stats_dict["number_of_tissues"] = len(
        df[["Target Species", "Target Tissue", "Tissue State"]].drop_duplicates()
    )
    return stats_dict


def main(argv=None):
    if argv is None:  # script was invoked from commandline
        argv = sys.argv[1:]
    parser = argparse.ArgumentParser(description="Update stats in the index.md file.")
    parser.add_argument(
        "input_md",
        type=file_path,
        help="input markdown file which contains the following strings:\n\t"
        + "\n\t".join(
            [
                "{number_of_contributors}",
                "{number_of_recommended_antibodies}",
                "{number_of_not_recommended_antibodies}",
                "{number_of_fluorophores}",
                "{number_of_tissues}",
            ]
        ),
    )
    parser.add_argument(
        "input_csv", type=file_path, help="Path to the reagent_resources.csv file."
    )
    parser.add_argument("output_file", type=str, help="markdown output file name")
    args = parser.parse_args(argv)

    try:
        update_index_stats(args.input_md, args.input_csv, args.output_file)
    except Exception as e:
        print(
            f"{e}",
            file=sys.stderr,
        )
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main())
